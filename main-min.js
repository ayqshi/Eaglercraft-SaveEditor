if("undefined"==typeof nbt)throw console.error("Dependency Error: nbt.js not loaded! Please ensure the script path is correct."),alert("Error: nbt.js library not found. Please check console for details."),new Error("nbt.js not loaded.");if("undefined"==typeof pako)throw console.error("Dependency Error: pako.min.js not loaded! Please ensure the script path is correct."),alert("Error: pako.min.js library not found. Please check console for details."),new Error("pako.min.js not loaded.");"undefined"==typeof Long&&console.warn("Dependency Warning: long.min.js not loaded! ByteArrayOutputStream.writeLong functionality will be disabled. This might affect EPK timestamp handling.");let epkFileInput,decompileButton,repackButton,statusMessageDiv,fileListContainer,fileContentEditor,saveChangesButton,messageBox,messageTitle,messageContent,messageCloseBtn,epkNameDisplay,activeFileNameDisplay,addFileButton,removeFileButton,epkFile=null,extractedFiles=new Map,activeFile={name:null,buffer:null,nbtParsed:null,wasGzipped:!1};function showStatusMessage(e,t){statusMessageDiv?(statusMessageDiv.textContent=e,statusMessageDiv.className="status-message "+(t?"status-"+t:""),statusMessageDiv.classList.remove("hidden")):console.warn("UI Warning: Status message div not found (ID 'statusMessage'). Cannot display status:",e)}function showMessageBox(e,t,n="info"){messageBox&&messageTitle&&messageContent?(messageTitle.textContent=e,messageContent.textContent=t,messageBox.style.display="block"):(alert(`${e}\n\n${t}`),console.warn("UI Warning: Message box elements not fully found. Falling back to alert for message:",e))}function clearFileListDisplay(){fileListContainer?fileListContainer.innerHTML='<p class="text-gray-400 p-4 text-center">Upload an EPK file to see its contents here.</p>':console.warn("UI Warning: fileListContainer (ID 'fileList') not found. Cannot clear file list display.")}function resetFileEditor(){fileContentEditor?(fileContentEditor.value="",fileContentEditor.placeholder="Select a file from the left to view/edit its content.",fileContentEditor.disabled=!0):console.warn("UI Warning: fileContentEditor (ID 'fileContentEditor') not found."),saveChangesButton?saveChangesButton.disabled=!0:console.warn("UI Warning: saveChangesButton (ID 'saveChangesButton') not found."),activeFileNameDisplay?activeFileNameDisplay.textContent="No file selected":console.warn("UI Warning: activeFileNameDisplay (ID 'activeFileNameDisplay') not found."),removeFileButton?removeFileButton.disabled=!0:console.warn("UI Warning: removeFileButton (ID 'removeFileButton') not found."),activeFile={name:null,buffer:null,nbtParsed:null,wasGzipped:!1};const e=fileListContainer?fileListContainer.querySelector(".file-list-item.selected"):null;e&&e.classList.remove("selected")}function displayExtractedFiles(e){clearFileListDisplay(),fileListContainer?0!==e.size?e.forEach(((e,t)=>{const n=document.createElement("div");n.className="file-list-item",n.dataset.filename=t;let s=t.split(".").pop().toLowerCase()||"binary";t.includes("/")&&s.length>5?s=t.includes("level0/")?"CHUNK":"UNKNOWN":t.endsWith(".dat_old")&&(s="DAT_OLD");let o="bg-gray-600";t.endsWith(".dat")&&!t.endsWith(".dat_old")?o="bg-purple-700":t.match(/\.(png|jpg|jpeg|gif|bmp|webp)$/i)?o="bg-blue-600":t.match(/\.(txt|json|yml|xml|html|css|js|glsl)$/i)?o="bg-green-600":t.match(/\.(ogg|wav|mp3)$/i)?o="bg-red-600":"CHUNK"===s&&(o="bg-orange-600"),n.innerHTML=`<span>${t}</span><span class="file-type-badge ${o}">${s.toUpperCase()}</span>`,n.addEventListener("click",(()=>{selectFileForEditing(t,e)})),fileListContainer.appendChild(n)})):fileListContainer.innerHTML='<p class="text-gray-400 p-4 text-center">No files extracted.</p>':console.error("UI Error: Cannot display files, fileListContainer (ID 'fileList') not found.")}function arrayBufferToBase64(e){let t="";const n=new Uint8Array(e),s=n.byteLength;for(let e=0;e<s;e++)t+=String.fromCharCode(n[e]);return btoa(t)}function base64ToArrayBuffer(e){const t=atob(e),n=t.length,s=new Uint8Array(n);for(let e=0;e<n;e++)s[e]=t.charCodeAt(e);return s.buffer}async function viewNBTData(e,t){showStatusMessage(`Attempting to parse NBT for ${e}...`,"info");let n=new Uint8Array(t);activeFile.wasGzipped=!1;try{if(n.length>2&&31===n[0]&&139===n[1])try{n=pako.ungzip(n),activeFile.wasGzipped=!0,showStatusMessage(`Decompressed GZIP for ${e}.`,"info")}catch(t){console.warn(`Could not decompress ${e} with GZIP. Assuming it's uncompressed or invalid GZIP.`,t)}const t=await new Promise(((e,t)=>{nbt.parse(n.buffer,((n,s)=>{n?t(n):e(s)}))}));activeFile.nbtParsed=t,fileContentEditor&&(fileContentEditor.value=JSON.stringify(t.value,null,2)),saveChangesButton&&(saveChangesButton.disabled=!1),showStatusMessage(`Successfully parsed NBT for ${e}.`,"success"),console.log("NBT Data Structure:",t)}catch(n){console.error(`Error parsing NBT for ${e}:`,n),fileContentEditor&&(fileContentEditor.value=`Error: Could not parse NBT data for ${e}.\n\nRaw data (Base64):\n${arrayBufferToBase64(t)}`,fileContentEditor.disabled=!0),saveChangesButton&&(saveChangesButton.disabled=!0),showStatusMessage(`Error parsing NBT for ${e}. See console for details.`,"error")}}async function decryptEpk(e){showStatusMessage("Attempting to decrypt EPK file...","info");const t=new Uint8Array(e);let n=0;const s=new Map;try{const e=t.subarray(n,n+8);n+=8;const o=new Uint8Array([69,65,71,80,75,71,36,36]),a=new Uint8Array([69,65,71,80,75,71,33,33]);if(!arraysEqual(e,o))throw arraysEqual(e,a)?new Error("Legacy EPK format detected. This decompiler currently only supports 'ver2.x' EPK files."):new Error("Unrecognized EPK file header.");const r=t.subarray(t.byteLength-8,t.byteLength);if(!arraysEqual(r,new Uint8Array([58,58,58,89,69,69,58,62])))throw new Error("EPK file is missing EOF code (:::YEE:>)");const i=t.subarray(8,t.byteLength-8),l=new DataView(i.buffer,i.byteOffset,i.byteLength);let c=0;const d=l.getUint8(c++),u=i.subarray(c,c+d);c+=d;const f=new TextDecoder("ascii").decode(u);if(!f.startsWith("ver2."))throw new Error(`Unknown or invalid EPK version: ${f}`);const g=l.getUint8(c++);c+=g;const p=l.getUint16(c,!1);c+=2,c+=p,c+=8;let m=l.getInt32(c,!1);c+=4;const h=String.fromCharCode(l.getUint8(c++)),w=i.subarray(c);let y;switch(h){case"G":showStatusMessage("Detected GZIP compression. Decompressing...","info"),y=pako.ungzip(w);break;case"Z":showStatusMessage("Detected ZLIB compression. Decompressing...","info"),y=pako.inflate(w);break;case"0":showStatusMessage("Detected no compression.","info"),y=w;break;default:throw new Error(`Invalid or unsupported EPK compression: ${h}`)}const E=new DataView(y.buffer,y.byteOffset,y.byteLength);let v=0;new CRC32;for(;m>0;){if(v+4>y.byteLength){console.warn("Ran out of data while reading file entries before expected number of objects processed.");break}const e=y.subarray(v,v+4);v+=4;const t=new TextDecoder("ascii").decode(e);if("END$"===t){m=0;break}const n=E.getUint8(v++),o=y.subarray(v,v+n);v+=n;const a=new TextDecoder("ascii").decode(o),r=E.getInt32(v,!1);let i;if(v+=4,"FILE"===t){if(r<5)throw new Error(`File '${a}' is incomplete (content too small).`);E.getInt32(v,!1);if(v+=4,i=y.slice(v,v+r-5),v+=r-5,":"!==String.fromCharCode(E.getUint8(v++)))throw new Error(`File '${a}' is incomplete (missing colon)`)}else i=y.slice(v,v+r),v+=r;if(">"!==String.fromCharCode(E.getUint8(v++)))throw new Error(`Object '${a}' is incomplete (missing greater than)`);s.set(a,i.buffer),m--}return 0!==m&&console.warn(`Unexpectedly ended decryption with ${m} files remaining.`),showStatusMessage(`EPK file decrypted successfully. Found ${s.size} files.`,"success"),s}catch(e){throw showStatusMessage(`EPK decryption failed: ${e.message}`,"error"),console.error("EPK Decryption Error:",e),e}}async function updateLevelDatLevelName(e){const t="level.dat",n="world-name";if(extractedFiles.has(t)){const n=extractedFiles.get(t);let s=new Uint8Array(n),o=!1;try{s.length>2&&31===s[0]&&139===s[1]&&(s=pako.ungzip(s),o=!0);const n=await new Promise(((e,t)=>{nbt.parse(s.buffer,((n,s)=>{n?t(n):e(s)}))}));let a=n.value,r=a.Data||a.Level;r&&r.LevelName&&"string"===r.LevelName.type?(r.LevelName.value=e,console.log(`Updated level.dat LevelName to: "${e}"`)):(a.Data||a.Level||(a.Data={type:"compound",value:{}},r=a.Data),r?(r.value.LevelName={type:"string",value:e},console.log(`Added LevelName to level.dat: "${e}"`)):console.warn("Could not find or add LevelName in level.dat for automatic update."));let i=new Uint8Array(nbt.writeUncompressed(n));o&&(i=pako.gzip(i)),extractedFiles.set(t,i.buffer),showStatusMessage(`level.dat's LevelName updated to "${e}".`,"info")}catch(e){console.error("Error updating level.dat's LevelName:",e),showStatusMessage(`Failed to update level.dat's LevelName: ${e.message}`,"error")}}else console.warn("level.dat not found in extracted files. Cannot update LevelName.");if(extractedFiles.has(n))try{const t=(new TextEncoder).encode(e);extractedFiles.set(n,t.buffer),showStatusMessage(`${n} content updated to "${e}".`,"info")}catch(e){console.error(`Error updating ${n}:`,e),showStatusMessage(`Failed to update ${n}: ${e.message}`,"error")}else console.warn(`${n} not found in extracted files. Not created or updated.`)}async function encryptEpk(e,t=null,n="1.5.2"){showStatusMessage("Attempting to re-pack and encrypt EPK file...","info");try{const s=new ByteArrayOutputStream;s.writeString("EAGPKG$$","ascii");const o="ver2.0";s.writeUint8(o.length),s.writeString(o,"ascii");const a=t?`${t}.epk`:epkFile?epkFile.name:"unknown.epk";s.writeUint8(a.length),s.writeString(a,"ascii");const r=new Date,i=`\n\n # Eagler EPK v2.0 - Generated by EaglerBinaryTools\n # update: on ${new Intl.DateTimeFormat("en-US",{month:"2-digit",day:"2-digit",year:"numeric"}).format(r)} at ${new Intl.DateTimeFormat("en-US",{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1}).format(r)}\n\n`;if(s.writeUint16(i.length),s.writeString(i,"ascii"),"undefined"==typeof Long)throw console.error("Long.js library not found. Cannot write 64-bit integer."),new Error("Long.js library is required for writeLong.");s.writeLong(r.getTime());const l=new Map,c=[],d=["_metadata"];for(const[n,s]of e.entries()){let e=n.replace(/\\/g,"/");if(t&&e.startsWith(`${t}/`)&&(e=e.substring(t.length+1)),e.startsWith("/")&&(e=e.substring(1)),d.includes(e)){c.push(n);continue}let o=e;l.set(o,s)}c.length>0&&(console.warn(`Skipped ${c.length} non-world-content metadata files during repack:`,c.join(", ")),showStatusMessage(`Skipped ${c.length} non-essential metadata files.`,"info")),s.writeInt(l.size+1);const u="0";s.writeUint8(u.charCodeAt(0));const f=new ByteArrayOutputStream;f.writeString("HEAD","ascii");const g="file-type";f.writeUint8(g.length),f.writeString(g,"ascii");let p="eaglercraft/world";"1.5.2"===n?p="epk/world152":"1.8.8"===n&&(p="epk/world188"),f.writeInt(p.length),f.writeString(p,"ascii"),f.writeUint8(">".charCodeAt(0));const m=new CRC32;for(const[e,t]of l.entries()){const n=new Uint8Array(t);m.reset(),m.update(n);const s=m.getValue();f.writeString("FILE","ascii"),f.writeUint8(e.length),f.writeString(e,"ascii"),f.writeInt(n.length+5),f.writeInt(s),f.writeBytes(n),f.writeUint8(":".charCodeAt(0)),f.writeUint8(">".charCodeAt(0))}let h;if(f.writeString("END$","ascii"),"G"===u)h=pako.gzip(f.toByteArray());else if("Z"===u)h=pako.deflate(f.toByteArray());else{if("0"!==u)throw new Error(`Unsupported compression type for packing: ${u}`);h=f.toByteArray()}return s.writeBytes(h),s.writeString(":::YEE:>","ascii"),showStatusMessage("EPK file re-packed and encrypted successfully.","success"),s.toByteArray().buffer}catch(e){throw showStatusMessage(`EPK re-packing failed: ${e.message}`,"error"),console.error("EPK Encryption Error:",e),e}}async function saveChanges(){if(activeFile.name){showStatusMessage(`Saving changes to ${activeFile.name}...`,"info");try{let e;if(activeFile.name.endsWith(".dat")&&activeFile.nbtParsed){const t=JSON.parse(fileContentEditor.value),n={name:activeFile.nbtParsed.name,value:t};let s=new Uint8Array(nbt.writeUncompressed(n));activeFile.wasGzipped&&(s=pako.gzip(s)),e=s.buffer}else if(activeFile.name.match(/\.(txt|json|yml|xml|html|css|js|glsl)$/i))e=new TextEncoder("utf-8").encode(fileContentEditor.value).buffer;else{e=base64ToArrayBuffer(fileContentEditor.value.split("\n").slice(1).join("\n"))}extractedFiles.set(activeFile.name,e),activeFile.buffer=e,showStatusMessage(`Changes to ${activeFile.name} saved successfully in memory.`,"success"),repackButton&&(repackButton.disabled=!1)}catch(e){throw console.error("Error saving changes:",e),showStatusMessage(`Error saving changes to ${activeFile.name}: ${e.message}`,"error"),showMessageBox("Save Error",`Failed to save changes to ${activeFile.name}: ${e.message}`,"error"),e}}else showMessageBox("Error","No file selected for saving.","error")}async function selectFileForEditing(e,t){if(activeFile.name)try{await saveChanges(),showStatusMessage(`Changes to ${activeFile.name} saved before switching.`,"success")}catch(e){showStatusMessage(`Error saving changes to ${activeFile.name} before switching: ${e.message}`,"error")}const n=fileListContainer?fileListContainer.querySelector(".file-list-item.selected"):null;n&&n.classList.remove("selected");const s=fileListContainer?fileListContainer.querySelector(`[data-filename="${e}"]`):null;s&&s.classList.add("selected"),showStatusMessage(`Loading ${e} into editor...`,"info"),fileContentEditor&&(fileContentEditor.disabled=!1),saveChangesButton&&(saveChangesButton.disabled=!0),removeFileButton&&(removeFileButton.disabled=!1),activeFileNameDisplay&&(activeFileNameDisplay.textContent=e),activeFile={name:e,buffer:t,nbtParsed:null,wasGzipped:!1};try{if(e.endsWith(".dat"))await viewNBTData(e,t);else if(e.match(/\.(txt|json|yml|xml|html|css|js|glsl)$/i)){const n=new TextDecoder("utf-8",{fatal:!0});try{fileContentEditor&&(fileContentEditor.value=n.decode(t)),saveChangesButton&&(saveChangesButton.disabled=!1),showStatusMessage(`Loaded ${e} as text.`,"success")}catch(n){console.warn(`Failed to decode ${e} as UTF-8, attempting Base64:`,n),fileContentEditor&&(fileContentEditor.value=`// Failed to decode as UTF-8, showing as Base64. Edit carefully!\n${arrayBufferToBase64(t)}`),saveChangesButton&&(saveChangesButton.disabled=!1),showStatusMessage(`Loaded ${e} as Base64 (UTF-8 decode failed).`,"warning")}}else fileContentEditor&&(fileContentEditor.value=`// Binary file, showing as Base64. Edit carefully!\n${arrayBufferToBase64(t)}`),saveChangesButton&&(saveChangesButton.disabled=!1),showStatusMessage(`Loaded ${e} as Base64.`,"info")}catch(t){console.error(`Error loading ${e}:`,t),fileContentEditor&&(fileContentEditor.value=`Error loading file: ${t.message}`,fileContentEditor.disabled=!0),saveChangesButton&&(saveChangesButton.disabled=!0),showStatusMessage(`Error loading ${e}.`,"error")}}class ByteArrayOutputStream{constructor(){this.buffer=[],this.offset=0}writeUint8(e){const t=new Uint8Array(1);new DataView(t.buffer).setUint8(0,e),this.buffer.push(t.buffer),this.offset+=1}writeUint16(e,t=!1){const n=new Uint8Array(2);new DataView(n.buffer).setUint16(0,e,t),this.buffer.push(n.buffer),this.offset+=2}writeInt(e,t=!1){const n=new Uint8Array(4);new DataView(n.buffer).setInt32(0,e,t),this.buffer.push(n.buffer),this.offset+=4}writeLong(e){if("undefined"==typeof Long)throw console.error("Long.js library not found. Cannot write 64-bit integer."),new Error("Long.js library is required for writeLong.");const t=Long.fromValue(e),n=new Uint8Array(8),s=new DataView(n.buffer);s.setInt32(0,t.high,!1),s.setInt32(4,t.low,!1),this.buffer.push(n.buffer),this.offset+=8}writeString(e,t="ascii"){const n=new TextEncoder(t).encode(e);this.buffer.push(n.buffer),this.offset+=n.length}writeBytes(e){const t=new Uint8Array(e);this.buffer.push(t.buffer.slice(t.byteOffset,t.byteLength+t.byteOffset)),this.offset+=t.byteLength}toByteArray(){if(0===this.buffer.length)return new Uint8Array(0);const e=this.buffer.reduce(((e,t)=>e+t.byteLength),0),t=new Uint8Array(e);let n=0;return this.buffer.forEach((e=>{t.set(new Uint8Array(e),n),n+=e.byteLength})),t}}function arraysEqual(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}class CRC32{constructor(){this.crc=-1,this.table=new Uint32Array(256);for(let e=0;e<256;e++){let t=e;for(let e=0;e<8;e++)t=1&t?3988292384^t>>>1:t>>>1;this.table[e]=t}}update(e){let t=this.crc;for(let n=0;n<e.length;n++)t=t>>>8^this.table[255&(t^e[n])];this.crc=t}getValue(){return~this.crc}reset(){this.crc=-1}}document.addEventListener("DOMContentLoaded",(()=>{epkFileInput=document.getElementById("epkFileInput"),epkFileInput||console.error("DOM Error: Element with ID 'epkFileInput' not found!"),decompileButton=document.getElementById("decompileButton"),decompileButton||console.error("DOM Error: Element with ID 'decompileButton' not found!"),repackButton=document.getElementById("repackButton"),repackButton||console.error("DOM Error: Element with ID 'repackButton' not found!"),statusMessageDiv=document.getElementById("statusMessage"),statusMessageDiv||console.error("DOM Error: Element with ID 'statusMessage' not found!"),fileListContainer=document.getElementById("fileList"),fileListContainer||console.error("DOM Error: Element with ID 'fileList') not found!"),fileContentEditor=document.getElementById("fileContentEditor"),fileContentEditor||console.error("DOM Error: Element with ID 'fileContentEditor') not found!"),saveChangesButton=document.getElementById("saveChangesButton"),saveChangesButton||console.error("DOM Error: Element with ID 'saveChangesButton') not found!"),messageBox=document.getElementById("messageBox"),messageBox||console.error("DOM Error: Element with ID 'messageBox') not found!"),messageTitle=document.getElementById("messageTitle"),messageTitle||console.error("DOM Error: Element with ID 'messageTitle') not found!"),messageContent=document.getElementById("messageContent"),messageContent||console.error("DOM Error: Element with ID 'messageContent') not found!"),messageCloseBtn=document.getElementById("messageCloseBtn"),messageCloseBtn||console.error("DOM Error: Element with ID 'messageCloseBtn') not found!"),epkNameDisplay=document.getElementById("epkName"),epkNameDisplay||console.error("DOM Error: Element with ID 'epkName') not found!"),activeFileNameDisplay=document.getElementById("activeFileNameDisplay"),activeFileNameDisplay||console.error("DOM Error: Element with ID 'activeFileNameDisplay') not found!"),addFileButton=document.getElementById("addFileButton"),addFileButton||console.error("DOM Error: Element with ID 'addFileButton') not found!"),removeFileButton=document.getElementById("removeFileButton"),removeFileButton||console.error("DOM Error: Element with ID 'removeFileButton') not found!"),decompileButton&&(decompileButton.disabled=!0),repackButton&&(repackButton.disabled=!0),saveChangesButton&&(saveChangesButton.disabled=!0),fileContentEditor&&(fileContentEditor.disabled=!0),addFileButton&&(addFileButton.disabled=!1),removeFileButton&&(removeFileButton.disabled=!0),epkNameDisplay&&(epkNameDisplay.textContent="No EPK Loaded"),activeFileNameDisplay&&(activeFileNameDisplay.textContent="No file selected"),showStatusMessage("Select an EPK file to get started.","info"),epkFileInput&&epkFileInput.addEventListener("change",(e=>{epkFile=e.target.files[0],epkFile?(showStatusMessage(`File selected: ${epkFile.name}`,"info"),decompileButton&&(decompileButton.disabled=!1),repackButton&&(repackButton.disabled=!0),epkNameDisplay&&(epkNameDisplay.textContent=epkFile.name),clearFileListDisplay(),resetFileEditor()):(showStatusMessage("No file selected.","warning"),decompileButton&&(decompileButton.disabled=!0),repackButton&&(repackButton.disabled=!0),epkNameDisplay&&(epkNameDisplay.textContent="No EPK Loaded"))})),decompileButton&&decompileButton.addEventListener("click",(async()=>{if(!epkFile)return showMessageBox("Error","Please select an EPK file first.","error");showStatusMessage("Reading file...","info"),decompileButton.disabled=!0,repackButton&&(repackButton.disabled=!0),resetFileEditor();const e=new FileReader;e.onload=async e=>{try{const t=e.target.result;extractedFiles=await decryptEpk(t),displayExtractedFiles(extractedFiles),repackButton&&(repackButton.disabled=!1),decompileButton.disabled=!1,showMessageBox("Decompiled",`EPK file '${epkFile.name}' decompiled successfully. Found ${extractedFiles.size} files.`,"success")}catch(e){console.error("Decryption failed:",e),showStatusMessage(`Decryption failed: ${e.message}`,"error"),showMessageBox("Decryption Failed",`Failed to decompile EPK: ${e.message}`,"error")}},e.onerror=e=>{showStatusMessage(`Error reading file: ${e.target.error.message}`,"error"),decompileButton.disabled=!1,showMessageBox("File Read Error",`Error reading selected EPK file: ${e.target.error.message}`,"error")},e.readAsArrayBuffer(epkFile)})),saveChangesButton&&saveChangesButton.addEventListener("click",(async()=>{try{await saveChanges(),showMessageBox("Saved",`Changes to "${activeFile.name}" saved!`,"success")}catch(e){}})),repackButton&&repackButton.addEventListener("click",(async()=>{if(0===extractedFiles.size)return void showMessageBox("Error","No files to repack. Decompile an EPK first.","error");if(activeFile.name)try{await saveChanges()}catch(e){return void showMessageBox("Repack Error",`Failed to save current file's changes before repacking: ${e.message}`,"error")}let e="EaglerWorld";epkFile&&epkFile.name&&(e=epkFile.name.replace(/\.epk$/i,"").trim(),e=e.replace(/[^\w\s-.]/g,""),""===e&&(e="EaglerWorld")),showMessageBox("Repacking World",`The world will be named and placed in a folder called:\n\n"${e}"\n\nThis name is derived from your input EPK file name.`,"info");let t=prompt("Enter the Eaglercraft world version (e.g., '1.5.2' or '1.8.8'). This affects EPK format:","1.5.2");if(null!==t)if(t=t.trim(),"1.5.2"===t||"1.8.8"===t){showStatusMessage("Repacking EPK file...","info"),decompileButton&&(decompileButton.disabled=!0),repackButton.disabled=!0;try{await updateLevelDatLevelName(e);const n=await encryptEpk(extractedFiles,e,t),s=new Blob([n],{type:"application/octet-stream"}),o=URL.createObjectURL(s),a=document.createElement("a");a.href=o,a.download=`${e}.epk`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(o),showStatusMessage("EPK file repacked and downloaded successfully!","success"),showMessageBox("Repacked",`EPK file '${a.download}' repacked and downloaded successfully! You can now try importing this into Eaglercraft.`,"success")}catch(e){console.error("Repacking failed:",e),showStatusMessage(`Repacking failed: ${e.message}`,"error"),showMessageBox("Repack Error",`Failed to repack EPK file: ${e.message}`,"error")}finally{decompileButton&&(decompileButton.disabled=!1),repackButton.disabled=!1}}else showMessageBox("Input Error","Invalid world version. Please enter '1.5.2' or '1.8.8'. Repack cancelled.","error");else showStatusMessage("Repack cancelled by user.","info")})),messageCloseBtn&&messageCloseBtn.addEventListener("click",(()=>{messageBox&&(messageBox.style.display="none")})),addFileButton&&addFileButton.addEventListener("click",(()=>{const e=document.createElement("input");e.type="file",e.onchange=async e=>{const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=async e=>{extractedFiles.set(t.name,e.target.result),displayExtractedFiles(extractedFiles),showMessageBox("File Added",`File "${t.name}" added to the EPK in memory.`,"success"),repackButton&&(repackButton.disabled=!1)},n.readAsArrayBuffer(t)},e.click()})),removeFileButton&&removeFileButton.addEventListener("click",(()=>{activeFile.name?confirm(`Are you sure you want to remove "${activeFile.name}" from the EPK?`)&&(extractedFiles.delete(activeFile.name),resetFileEditor(),displayExtractedFiles(extractedFiles),showMessageBox("File Removed",`File "${activeFile.name}" removed from the EPK in memory.`,"info"),repackButton&&(repackButton.disabled=!1)):showMessageBox("Warning","No file selected to remove.","warning")}))}));
